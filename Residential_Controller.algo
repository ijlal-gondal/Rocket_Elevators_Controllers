// This Sequence will control the movement of Elevators in a residential building with 2 Elevators and 10 floors.

Objects to be controlled:
 Column is the pack of elevator, which is only 1 in our residential case.
 Cage is being reffered to as Elevator in my algorithim
 Call button,  which I have named as OutsideButton
 Doors, which are being controlled by OpenDoor and CloseDoor function
 Floor request button, which I have named as InsideButton

Input, Outputs and Variables: 

InsideButton, Ousidebutton, TotalFloor, idle, Elevatorlist, StopList, TargetFloor, Status

MoveUp, MoveDown, OpenDoor, CloseDoor 


SEQUENCE CallingElevator USING Direction and Floor
    If outside Button pressed
    Add UserFloor to StopList
    Call SEQUENCE ActivateOutsideButton with TargetDirection and UserFloor return ButtonStatus
    Call SEQUENCE FindElevator with TargetDirection and UserFloor return elevator
    Call SEQUENCE MoveElevator with TargetDirection and TargetFloor
    End If
END SEQUENCE 

SEQUENCE ActivateOutsideButton USING Direction and Floor

    If the Userfloor is not equal to elevatorFloor 
        set the Button Status to active
        Turn ON the Button Light
        Add TargetDirection to elevatorDirection
        return ButtonStatus
    End If

END SEQUENCE

SEQUENCE DeactivateOustideButton USING Direction and Floor

    If the Userfloor equals elevatorFloor and TargetDirection equals elevatorDirection 
        Turn OFF the Button Light
        Set the button status to inactive
    return ButtonStatus
    End If

END SEQUENCE

SEQUENCE ArrangingStopList USING Direction and Floor
    If the elevatorDirection is UP
        arrange the StopList in ascending order
    Else the elevatorDirection is DOWN
        arrange the StopList in descending order
    End If

END SEQUENCE


Sequence MoveElevator USING TargetDirection
    If TargetDirection is UP then
        Call Sequence Elevator MoveUp
        Set Status to Moving
    Else If TargetDirection is DOWN then
        Call Sequence Elevator MoveDown
        Set Status to Moving
    Else if Set Status to Idle
    
END SEQUENCE

Sequence ElevatorMoveUp
    If OpenDoor is True
        Call Sequence CloseDoor
    Else CloseDoor is True
        while UserFloor < TargetFloor
        Increment User Floor by 1
        END SEQUENCE WHILE
    Call Sequence OpenDoor
    Call SEQUENCE DeactivateInsideButton
    Remove TargetFloor from StopList
    If StopList Length is greater than 1 then
        set Status to Moving
    Else StopList Length is 0 then
        set Status to Idle
END SEQUENCE

Sequence ElevatorMoveDown
    If OpenDoor is True
        Call Sequence CloseDoor
    Else CloseDoor is True
        while UserFloor > TargetFloor
        Decrement User Floor by 1
        END SEQUENCE WHILE
    Call Sequence OpenDoor
    Call SEQUENCE DeactivateInsideButton
    Remove TargetFloor from StopList
        If StopList Length is greater than 1 then
        set Status to Moving
    Else StopList Length is 0 then
        set Status to Idle

END SEQUENCE

Sequence FindDirection USING Floor and Direction
    If UserFloor - TargetFloor is < 0
    set Direction UP
    Else If UserFloor - TargetFloor is > 0
    set Direction DOWN
    ELse If UserFloor - TargetFloor = 0
    DO Nothing
END SEQUENCE


Sequence OpenDoor 
    WHILE CloseDoor is True
    If UserFloor equals TargetFloor
    END SEQUENCEWHILE
    Open Door

END SEQUENCE

Sequence CloseDoor
    WHILE OpenDoor is True
    wait for 15 seconds
    If there is no obstruction
    END SEQUENCEWHILE
    Close Door
    
END SEQUENCE



Sequence FindElevator USING UserDirection and UserFloor
     for elevator in Elevatorlist
            if UserDirection equals elevatorDirection and UserFloor equals elevatorFloor and elevator is Stopped
            return elevator
            else if UserDirection equals elevatorDirection and UserFloor equals elevatorFloor and elevator is Idle
            return elevator
            else if UserDirection equals elevatorDirection and UserFloor > elevatorFloor and elevator is Moving or Stopped
                Call Sequence findClosestElevator, then return ClosestElevator
            return elevator
            else if UserDirection equals elevatorDirection and UserFloor < elevatorFloor and elevator is Moving or Stopped
              Call Sequence findClosestElevator, then return ClosestElevator
            return elevator
            else if elevator status equals idle
                Call Sequence findClosestElevator, then return ClosestElevator
            return elevator

            
END SEQUENCE



Sequence findClosestElevator
    Look for elevator in Elevatorlist
        Compute the difference between UserFloor and elevatorFloor, then set it as closeness
        Compare that to difference of next elevator in Elevatorlist
        if difference of next elevator < closeness
        set differenceof next elevator to be closeness
        return ClosestElevator with the closeness
END SEQUENCE



SEQUENCE RequestingFloor
    When inside button pressed
    Add TargetFloor into StopList
    Call Sequence FindDirection
    Call SEQUENCE ActivateInsideButton
    Call Sequence MoveElevator

END SEQUENCE


SEQUENCE ActivateInsideButton USING Direction and Floor

    If the Userfloor does not equal elevatorFloor and UserDirection equals elevatorDirection 
        Turn ON the Button Light
        then return ButtonStatus
END SEQUENCE

SEQUENCE DeactivateInsideButton USING Direction and Floor

    If the Userfloor equals elevatorFloor and UserDirection equals elevatorDirection 
        Turn OFF the Button Light
        then return ButtonStatus

END SEQUENCE




function requestElevator(floor,direction) 
function elevatorRequest(elevator,floor)